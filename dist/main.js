(()=>{"use strict";const e={formSelector:".edit-box",fieldsetSelector:".edit-box__set",inputSelector:".edit-box__input",submitButtonSelector:".edit-box__button",inactiveButtonClass:"edit-box__button_inactive",inputErrorClass:"edit-box__input_type_error",errorClass:"edit-box__input-error_active"};class t{constructor(e,t){this._settings=e,this._formElement=t}_showInputError=(e,t,n)=>{const i=e.querySelector(`#${t.id}-error`);t.classList.add(this._settings.inputErrorClass),i.textContent=n,i.classList.add(this._settings.errorClass)};_hideInputError=(e,t)=>{const n=e.querySelector(`#${t.id}-error`);t.classList.remove(this._settings.inputErrorClass),n.classList.remove(this._settings.errorClass),n.textContent=""};_isValid=(e,t)=>{t.validity.valid?this._hideInputError(e,t):this._showInputError(e,t,t.validationMessage)};_hasInvalidInput=e=>e.some((e=>!e.validity.valid));_toggleButtonState=(e,t)=>{this._hasInvalidInput(e)?(t.classList.add(this._settings.inactiveButtonClass),t.disabled=!0):(t.classList.remove(this._settings.inactiveButtonClass),t.disabled=!1)};_setEventListeners=e=>{const t=Array.from(e.querySelectorAll(this._settings.inputSelector)),n=e.querySelector(this._settings.submitButtonSelector);this._toggleButtonState(t,n),t.forEach((i=>{i.addEventListener("input",(()=>{this._isValid(e,i),this._toggleButtonState(t,n)}))}))};enableValidation=()=>{Array.from(document.querySelectorAll(this._settings.formSelector)).forEach((e=>{e.addEventListener("submit",(e=>{e.preventDefault()})),Array.from(e.querySelectorAll(this._settings.fieldsetSelector)).forEach((e=>{this._setEventListeners(e)}))}))}}class n{constructor({items:e,renderer:t},n){this._renderedItems=e,this._renderer=t,this._container=document.querySelector(n)}renderer(){this._renderedItems.forEach((e=>this._renderer(e)))}addItem(e){this._container.append(e),"newCardElement"===e?this._container.prepend(e):this._container.append(e)}}class i extends q{constructor({popupSelector:e,handleFormSubmit:t}){super(e),this._handleFormSubmit=t}close(){super.close(),this._popupElement.querySelectorAll("edit-box__input").forEach((e=>e.reset()))}_getInputValues(){return this._inputList=this._popupElement.querySelectorAll(".edit-box__input"),this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setEventListeners(){super.setEventListeners(),this._popupElement.querySelector(".edit-box__button").addEventListener("click",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}}class o{constructor({userName:e,userDescription:t}){this._userNameElement=document.querySelector(e),this._userDescriptionElement=document.querySelector(t)}getUserInfo(){return{userName:this._userNameElement.textContent,userDescription:this._userDescriptionElement.textContent}}setUserInfo(e){const{username:t,userdescription:n}=e;this._userNameElement.textContent=t,this._userDescriptionElement.textContent=n}}const s=new t(e,".edit-box_type_profile"),r=new t(e,".edit-box_type_image");s.enableValidation(),r.enableValidation(),document.querySelector(".profile__title"),document.querySelector(".profile__subtitle"),document.querySelectorAll(".modal");const a=document.querySelector(".profile__button-edit"),l=(document.querySelector(".modal_type_edit"),document.querySelector(".image-grid")),d=document.querySelector(".edit-box_type_image"),c=(document.querySelector(".image-expand"),document.querySelector(".edit-box_type_profile"),document.querySelector(".modal_type_add")),u=document.querySelector(".edit-box__input_type_image-title"),_=document.querySelector(".edit-box__input_type_image-link"),m=document.querySelector(".profile__button-add"),p=document.querySelector(".edit-box__input_type_title"),h=document.querySelector(".edit-box__input_type_description"),y=(document.querySelector(".edit-box__button_edit"),document.querySelector(".edit-box__button_add"),new n({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>{const t=new v({data:e,handleCardClick:({link:e,name:t})=>{g.open({link:e,name:t})}},"#image-card-template").generateCard();y.addItem(t)}},".image-grid"));y.renderer();const g=new x(".image-expand");g.setEventListeners();const S=new i({popupSelector:".modal_type_edit",handleFormSubmit:e=>{b.setUserInfo(e)}});S.setEventListeners();const b=new o({userName:".profile__title",userDescription:".profile__subtitle"});a.addEventListener("click",(()=>{const{userName:e,userDescription:t}=b.getUserInfo();p.value=e,h.value=t,S.open()}));const E=new i({popupSelector:".modal_type_add",handleFormSubmit:e=>{const t=new v({data:e,handleCardClick:({name:e,link:t})=>{g.open({name:e,link:t})}},"#image-card-template").generateCard();y.addItem(t),console.log(E._getInputValues())}});E.setEventListeners(),m.addEventListener("click",(()=>{E.open()})),d.addEventListener("submit",(function(e){e.preventDefault();const t=new v({name:u.value,link:_.value},"#image-card-template").generateCard();l.prepend(t),closePopUp(c)}));class q{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_open"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target.classList.contains("modal_open")||e.target.classList.contains("modal__close-icon"))&&this.close()}))}}class x extends q{constructor(e){super(e)}open({link:e,name:t}){this._popupElement.querySelector(".image-expand__image").src=e,this._popupElement.querySelector(".image-expand__title").textContent=t,this._popupElement.querySelector(".image-expand__image").setAttribute("alt",t),super.open()}}class v{constructor({data:e,handleCardClick:t},n){this._name=e.name,this._link=e.link,this._template=n,this._handleCardClick=t}_getTemplate(){return document.querySelector(this._template).content.querySelector(".image-card").cloneNode(!0)}_toggleHearts(){this._element.querySelector(".image-card__heart").classList.toggle("image-card__heart_liked")}_deleteImage(){this._element.querySelector(".image-card__trash").closest(".image-card").remove()}_setEventListeners(){this._element.querySelector(".image-card__heart").addEventListener("click",(()=>this._toggleHearts())),this._element.querySelector(".image-card__trash").addEventListener("click",(()=>this._deleteImage())),this._element.querySelector(".image-card__image").addEventListener("click",(()=>this._handleCardClick({name:this._name,link:this._link})))}generateCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".image-card__image");return this._element.querySelector(".image-card__title").textContent=this._name,e.src=this._link,e.setAttribute("alt",this._name),this._element}}const k=new t(e,".edit-box_type_profile"),L=new t(e,".edit-box_type_image");k.enableValidation(),L.enableValidation(),console.log("hi"),console.log("bye"),document.querySelector(".profile__title"),document.querySelector(".profile__subtitle"),document.querySelectorAll(".modal");const f=document.querySelector(".profile__button-edit"),C=(document.querySelector(".modal_type_edit"),document.querySelector(".image-grid"),document.querySelector(".edit-box_type_image"),document.querySelector(".image-expand"),document.querySelector(".edit-box_type_profile"),document.querySelector(".modal_type_add"),document.querySelector(".edit-box__input_type_image-title"),document.querySelector(".edit-box__input_type_image-link"),document.querySelector(".profile__button-add")),w=document.querySelector(".edit-box__input_type_title"),I=document.querySelector(".edit-box__input_type_description"),V=(document.querySelector(".edit-box__button_edit"),document.querySelector(".edit-box__button_add"),new n({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>{const t=new v({data:e,handleCardClick:({link:e,name:t})=>{j.open({link:e,name:t})}},"#image-card-template").generateCard();V.addItem(t)}},".image-grid"));V.renderer();const j=new x(".image-expand");j.setEventListeners();const A=new i({popupSelector:".modal_type_edit",handleFormSubmit:e=>{B.setUserInfo(e)}});A.setEventListeners();const B=new o({userName:".profile__title",userDescription:".profile__subtitle"});f.addEventListener("click",(()=>{const{userName:e,userDescription:t}=B.getUserInfo();w.value=e,I.value=t,A.open()}));const D=new i({popupSelector:".modal_type_add",handleFormSubmit:e=>{const t=new v({data:e,handleCardClick:({name:e,link:t})=>{j.open({name:e,link:t})}},"#image-card-template").generateCard();V.addItem(t)}});D.setEventListeners(),C.addEventListener("click",(()=>{D.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,