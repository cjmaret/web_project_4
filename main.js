!function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function t(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var n=function(){function n(e,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),t(this,"_showInputError",(function(e,t){var n=o._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(o._inputErrorClass),n.classList.add(o._errorClass),n.textContent=t})),t(this,"_hideInputError",(function(e){var t=o._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(o._inputErrorClass),t.classList.remove(o._errorClass),t.textContent=""})),t(this,"_isValid",(function(e){e.validity.valid?o._hideInputError(e):o._showInputError(e,e.validationMessage)})),t(this,"_hasInvalidInput",(function(e){return e.some((function(e){return!e.validity.valid}))})),t(this,"_toggleButtonState",(function(){o._hasInvalidInput(o._inputList)?(o._buttonElement.classList.add(o._inactiveButtonClass),o._buttonElement.disabled=!0):(o._buttonElement.classList.remove(o._inactiveButtonClass),o._buttonElement.disabled=!1)})),t(this,"_setEventListeners",(function(){o._inputList.forEach((function(e){e.addEventListener("input",(function(){o._isValid(e),o._toggleButtonState()}))}))})),t(this,"enableValidation",(function(){o._formElement.addEventListener("submit",(function(e){e.preventDefault()})),o._setEventListeners()})),this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=r,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector)}var r,o;return r=n,(o=[{key:"resetValidation",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&e(r.prototype,o),n}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._renderer=o,this._container=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderer",value:function(){var e=this;this._renderedItems.forEach((function(t){return e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"addCards",value:function(e){this._container.append(e)}}])&&r(t.prototype,n),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("modal_open"),document.addEventListener("keyup",this._handleEscClose)}},{key:"close",value:function(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keyup",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popupElement.addEventListener("click",(function(t){(t.target.classList.contains("modal_open")||t.target.classList.contains("modal__close-icon"))&&e.close()}))}}])&&i(t.prototype,n),e}();function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return(c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function l(e,t){return(l=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&l(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=d(r);if(o){var n=d(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return f(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._image=t._popupElement.querySelector(".image-expand__image"),t._title=t._popupElement.querySelector(".image-expand__title"),t}return t=a,(n=[{key:"open",value:function(e){var t=e.link,n=e.name;this._image.src=t,this._title.textContent=n,this._image.setAttribute("alt",n),c(d(a.prototype),"open",this).call(this)}}])&&s(t.prototype,n),a}(a);function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(e,t,n){return(m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function y(e,t){return(y=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function v(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function b(e){return(b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&y(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=b(r);if(o){var n=b(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return v(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit,o=e.submitButton;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._handleFormSubmit=r,t._inputList=t._popupElement.querySelectorAll(".edit-box__input"),t._formElement=t._popupElement.querySelector(".edit-box"),t._submitButton=o,t}return t=a,(n=[{key:"close",value:function(){m(b(a.prototype),"close",this).call(this),this.renderLoading(!1),this._formElement.reset()}},{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"renderLoading",value:function(e){this._submitButton.textContent=e?"Saving...":this._submitButton.dataset.textcontent}},{key:"setEventListeners",value:function(){var e=this;m(b(a.prototype),"setEventListeners",this).call(this),this._formElement.addEventListener("submit",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit(e._getInputValues())}))}}])&&p(t.prototype,n),a}(a);function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t){var n=t.userName,r=t.userDescription,o=t.userAvatar,i=t.userId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userNameElement=n,this._userDescriptionElement=r,this._userId=i,this._userAvatar=o}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userName:this._userNameElement.textContent,userDescription:this._userDescriptionElement.textContent}}},{key:"setUserInfo",value:function(e){var t=e.username,n=e.userdescription;this._userNameElement.textContent=t,this._userDescriptionElement.textContent=n}},{key:"setUserAvatar",value:function(e){this._userAvatar.src=e}}])&&k(t.prototype,n),e}();function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_returnRes",value:function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}},{key:"getCardList",value:function(){var e=this;return fetch(this._baseUrl+"/cards",{method:"GET",headers:this._headers}).then((function(t){return e._returnRes(t)}))}},{key:"getUserInfo",value:function(){var e=this;return fetch(this._baseUrl+"/users/me",{method:"GET",headers:this._headers}).then((function(t){return e._returnRes(t)}))}},{key:"setUserInfo",value:function(e){var t=this,n=e.name,r=e.about;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:this._headers,body:JSON.stringify({name:n,about:r})}).then((function(e){return t._returnRes(e)}))}},{key:"addCard",value:function(e){var t=this,n=e.name,r=e.link;return fetch(this._baseUrl+"/cards",{method:"POST",headers:this._headers,body:JSON.stringify({name:n,link:r})}).then((function(e){return t._returnRes(e)}))}},{key:"removeCard",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/"+e,{method:"DELETE",headers:this._headers}).then((function(e){return t._returnRes(e)}))}},{key:"setUserAvatar",value:function(e){var t=this;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(e){return t._returnRes(e)}))}},{key:"addLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/likes/"+e,{method:"PUT",headers:this._headers}).then((function(e){return t._returnRes(e)}))}},{key:"removeLike",value:function(e){var t=this;return fetch(this._baseUrl+"/cards/likes/"+e,{method:"DELETE",headers:this._headers}).then((function(e){return t._returnRes(e)}))}}])&&S(t.prototype,n),e}();function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t,n){var r=t.data,o=t.handleCardClick,i=t.handleDeleteClick,a=t.handleLikeAdd,u=t.handleLikeDelete,s=t.userId;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=r.name,this._link=r.link,this._template=n,this._id=r._id,this._ownerId=r.owner._id,this._user=s,this._handleCardClick=o,this._handleDeleteClick=i,this._handleLikeAdd=a,this._handleLikeDelete=u,this._likesArray=r.likes,this._cardLikes=r.likes.length}var t,n;return t=e,(n=[{key:"_getTemplate",value:function(){return document.querySelector(this._template).content.querySelector(".image-card").cloneNode(!0)}},{key:"addHeart",value:function(){var e=this._element.querySelector(".image-card__heart"),t=this._element.querySelector(".image-card__heart-number");e.classList.add("image-card__heart_liked"),t.textContent=this._likesArray.length}},{key:"removeHeart",value:function(){var e=this._element.querySelector(".image-card__heart"),t=this._element.querySelector(".image-card__heart-number");e.classList.remove("image-card__heart_liked"),t.textContent=this._likesArray.length,0===this._cardLikes&&(t.textContent="")}},{key:"deleteImage",value:function(){this._element.querySelector(".image-card__trash").closest(".image-card").remove()}},{key:"updateLikes",value:function(e){return this._likesArray=e}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".image-card__heart").addEventListener("click",(function(){e._likesArray.some((function(t){return t._id===e._user}))?e._handleLikeDelete({id:e._id}):e._handleLikeAdd({id:e._id})})),this._element.querySelector(".image-card__trash").addEventListener("click",(function(){e._handleDeleteClick({id:e._id})})),this._element.querySelector(".image-card__image").addEventListener("click",(function(){return e._handleCardClick({name:e._name,link:e._link})})),this._ownerId!==this._user&&this._element.querySelector(".image-card__trash").remove()}},{key:"generateCard",value:function(){var e=this;this._element=this._getTemplate(),this._setEventListeners();var t=this._element.querySelector(".image-card__image");return this._element.querySelector(".image-card__title").textContent=this._name,t.src=this._link,t.setAttribute("alt",this._name),this._cardLikes>0?this._element.querySelector(".image-card__heart-number").textContent=this._cardLikes:this._element.querySelector(".image-card__heart-number").textContent="",this._likesArray.some((function(t){return t._id===e._user}))?this._element.querySelector(".image-card__heart").classList.add("image-card__heart_liked"):this._element.querySelector(".image-card__heart").classList.remove("image-card__heart_liked"),this._element}}])&&C(t.prototype,n),e}();function O(e){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function q(e,t,n){return(q="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=R(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function P(e,t){return!t||"object"!==O(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function R(e){return(R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&j(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=R(r);if(o){var n=R(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return P(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit,o=e.submitButton;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._handleFormSubmit=r,t._submitButton=o,t}return t=a,(n=[{key:"close",value:function(){q(R(a.prototype),"close",this).call(this),this.renderLoading(!1)}},{key:"setSubmitAction",value:function(e){this._handleFormSubmit=e}},{key:"renderLoading",value:function(e){this._submitButton.textContent=e?"Deleting...":this._submitButton.dataset.textcontent}},{key:"setEventListeners",value:function(){var e=this;q(R(a.prototype),"setEventListeners",this).call(this),this._popupElement.querySelector(".edit-box__button").addEventListener("click",(function(t){t.preventDefault(),e.renderLoading(!0),e._handleFormSubmit()}))}}])&&x(t.prototype,n),a}(a),B=document.querySelector(".profile__title"),A=document.querySelector(".profile__subtitle"),U=document.querySelector(".profile__image"),D=document.querySelector(".profile__button-edit"),T=document.querySelector(".profile__button-add"),V=document.querySelector(".edit-box__input_type_title"),N=document.querySelector(".edit-box__input_type_description"),F=document.querySelector(".edit-box_type_profile"),H=document.querySelector(".edit-box_type_image"),J=document.querySelector(".edit-box_type_profile-image"),G=document.querySelector(".profile__image-overlay"),z=(document.querySelector(".edit-box__button"),document.querySelector(".edit-box__button_add")),M=document.querySelector(".edit-box__button_delete-card"),K=document.querySelector(".edit-box__button_edit"),Q=document.querySelector(".edit-box__button_profile-image"),W={formSelector:".edit-box",fieldsetSelector:".edit-box__set",inputSelector:".edit-box__input",submitButtonSelector:".edit-box__button",inactiveButtonClass:"edit-box__button_inactive",inputErrorClass:"edit-box__input_type_error",errorClass:"edit-box__input-error_active"},X=new n(W,F),Y=new n(W,H),Z=new n(W,J);X.enableValidation(),Y.enableValidation(),Z.enableValidation();var $=new h(".image-expand");$.setEventListeners();var ee=new g({popupSelector:".modal_type_edit",handleFormSubmit:function(e){ne.setUserInfo({name:e.username,about:e.userdescription}).then((function(){te.setUserInfo({username:e.username,userdescription:e.userdescription}),ee.close()})).catch((function(e){return console.log(e)}))},submitButton:K});ee.setEventListeners();var te=new E({userName:B,userDescription:A,userAvatar:U});D.addEventListener("click",(function(){var e=te.getUserInfo(),t=e.userName,n=e.userDescription;V.value=t,N.value=n,ee.open(),X.resetValidation()}));var ne=new L({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"bf6a8c78-b245-4594-801d-fa3b505682c7","Content-Type":"application/json"}});ne.getUserInfo().then((function(e){te.setUserInfo({username:e.name,userdescription:e.about}),te.setUserAvatar(e.avatar),te.userId=e._id})).then((function(){ne.getCardList().then((function(e){var t=new o({items:e,renderer:function(e){var n=ie(e);t.addCards(n)}},".image-grid");t.renderer();var n=new g({popupSelector:".modal_type_add",handleFormSubmit:function(e){ne.addCard(e).then((function(e){var r=ie(e);t.addItem(r),n.close()})).catch((function(e){return console.log(e)}))},submitButton:z});n.setEventListeners(),T.addEventListener("click",(function(){n.open(),Y.resetValidation()}))})).catch((function(e){return console.log(e)}))})).catch((function(e){return console.log(e)}));var re=new g({popupSelector:".modal_type_profile-image",handleFormSubmit:function(e){var t=e.profileimage;ne.setUserAvatar(t).then((function(){te.setUserAvatar(t),re.close()})).catch((function(e){return console.log(e)}))},submitButton:Q});re.setEventListeners(),G.addEventListener("click",(function(){re.open(),Z.resetValidation()}));var oe=new I({popupSelector:".modal_type_delete-card",submitButton:M});function ie(e){var t=new w({data:e,handleCardClick:function(e){var t=e.link,n=e.name;$.open({link:t,name:n})},handleDeleteClick:function(e){var n=e.id;oe.open(),oe.setSubmitAction((function(){ne.removeCard(n).then((function(){oe.close(),t.deleteImage()})).catch((function(e){return console.log(e)}))}))},handleLikeAdd:function(e){var n=e.id;ne.addLike(n).then((function(e){t.updateLikes(e.likes),t.addHeart()})).catch((function(e){return console.log(e)}))},handleLikeDelete:function(e){var n=e.id;ne.removeLike(n).then((function(e){t.updateLikes(e.likes),t.removeHeart()})).catch((function(e){return console.log(e)}))},userId:te.userId},"#image-card-template");return t.generateCard()}oe.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,